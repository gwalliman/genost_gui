//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace CapGUI.serverXML {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ArrayOfXElement", Namespace="http://schemas.datacontract.org/2004/07/System.Xml.Linq", ItemName="XElement")]
    public class ArrayOfXElement : System.Collections.ObjectModel.ObservableCollection<System.Xml.Linq.XElement> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="serverXML.IPolicyRetriever")]
    public interface IPolicyRetriever {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicy", ReplyAction="http://tempuri.org/IPolicyRetriever/GetSilverlightPolicyResponse")]
        System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetSilverlightPolicy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPolicyRetrieverChannel : CapGUI.serverXML.IPolicyRetriever, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSilverlightPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSilverlightPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PolicyRetrieverClient : System.ServiceModel.ClientBase<CapGUI.serverXML.IPolicyRetriever>, CapGUI.serverXML.IPolicyRetriever {
        
        private BeginOperationDelegate onBeginGetSilverlightPolicyDelegate;
        
        private EndOperationDelegate onEndGetSilverlightPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetSilverlightPolicyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PolicyRetrieverClient() {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PolicyRetrieverClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetSilverlightPolicyCompletedEventArgs> GetSilverlightPolicyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapGUI.serverXML.IPolicyRetriever.BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] CapGUI.serverXML.IPolicyRetriever.EndGetSilverlightPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetSilverlightPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetSilverlightPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((CapGUI.serverXML.IPolicyRetriever)(this)).BeginGetSilverlightPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetSilverlightPolicy(System.IAsyncResult result) {
            byte[] retVal = ((CapGUI.serverXML.IPolicyRetriever)(this)).EndGetSilverlightPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSilverlightPolicyCompleted(object state) {
            if ((this.GetSilverlightPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSilverlightPolicyCompleted(this, new GetSilverlightPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSilverlightPolicyAsync() {
            this.GetSilverlightPolicyAsync(null);
        }
        
        public void GetSilverlightPolicyAsync(object userState) {
            if ((this.onBeginGetSilverlightPolicyDelegate == null)) {
                this.onBeginGetSilverlightPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetSilverlightPolicy);
            }
            if ((this.onEndGetSilverlightPolicyDelegate == null)) {
                this.onEndGetSilverlightPolicyDelegate = new EndOperationDelegate(this.OnEndGetSilverlightPolicy);
            }
            if ((this.onGetSilverlightPolicyCompletedDelegate == null)) {
                this.onGetSilverlightPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSilverlightPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetSilverlightPolicyDelegate, null, this.onEndGetSilverlightPolicyDelegate, this.onGetSilverlightPolicyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CapGUI.serverXML.IPolicyRetriever CreateChannel() {
            return new PolicyRetrieverClientChannel(this);
        }
        
        private class PolicyRetrieverClientChannel : ChannelBase<CapGUI.serverXML.IPolicyRetriever>, CapGUI.serverXML.IPolicyRetriever {
            
            public PolicyRetrieverClientChannel(System.ServiceModel.ClientBase<CapGUI.serverXML.IPolicyRetriever> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetSilverlightPolicy(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSilverlightPolicy", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetSilverlightPolicy(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetSilverlightPolicy", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="serverXML.IWCFXmlService")]
    public interface IWCFXmlService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWCFXmlService/GetXmlData", ReplyAction="http://tempuri.org/IWCFXmlService/GetXmlDataResponse")]
        System.IAsyncResult BeginGetXmlData(string xmlUrl, System.AsyncCallback callback, object asyncState);
        
        CapGUI.serverXML.ArrayOfXElement EndGetXmlData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFXmlServiceChannel : CapGUI.serverXML.IWCFXmlService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXmlDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXmlDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public CapGUI.serverXML.ArrayOfXElement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((CapGUI.serverXML.ArrayOfXElement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFXmlServiceClient : System.ServiceModel.ClientBase<CapGUI.serverXML.IWCFXmlService>, CapGUI.serverXML.IWCFXmlService {
        
        private BeginOperationDelegate onBeginGetXmlDataDelegate;
        
        private EndOperationDelegate onEndGetXmlDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetXmlDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WCFXmlServiceClient() {
        }
        
        public WCFXmlServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WCFXmlServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFXmlServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WCFXmlServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetXmlDataCompletedEventArgs> GetXmlDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult CapGUI.serverXML.IWCFXmlService.BeginGetXmlData(string xmlUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXmlData(xmlUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        CapGUI.serverXML.ArrayOfXElement CapGUI.serverXML.IWCFXmlService.EndGetXmlData(System.IAsyncResult result) {
            return base.Channel.EndGetXmlData(result);
        }
        
        private System.IAsyncResult OnBeginGetXmlData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string xmlUrl = ((string)(inValues[0]));
            return ((CapGUI.serverXML.IWCFXmlService)(this)).BeginGetXmlData(xmlUrl, callback, asyncState);
        }
        
        private object[] OnEndGetXmlData(System.IAsyncResult result) {
            CapGUI.serverXML.ArrayOfXElement retVal = ((CapGUI.serverXML.IWCFXmlService)(this)).EndGetXmlData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetXmlDataCompleted(object state) {
            if ((this.GetXmlDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXmlDataCompleted(this, new GetXmlDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXmlDataAsync(string xmlUrl) {
            this.GetXmlDataAsync(xmlUrl, null);
        }
        
        public void GetXmlDataAsync(string xmlUrl, object userState) {
            if ((this.onBeginGetXmlDataDelegate == null)) {
                this.onBeginGetXmlDataDelegate = new BeginOperationDelegate(this.OnBeginGetXmlData);
            }
            if ((this.onEndGetXmlDataDelegate == null)) {
                this.onEndGetXmlDataDelegate = new EndOperationDelegate(this.OnEndGetXmlData);
            }
            if ((this.onGetXmlDataCompletedDelegate == null)) {
                this.onGetXmlDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXmlDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetXmlDataDelegate, new object[] {
                        xmlUrl}, this.onEndGetXmlDataDelegate, this.onGetXmlDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override CapGUI.serverXML.IWCFXmlService CreateChannel() {
            return new WCFXmlServiceClientChannel(this);
        }
        
        private class WCFXmlServiceClientChannel : ChannelBase<CapGUI.serverXML.IWCFXmlService>, CapGUI.serverXML.IWCFXmlService {
            
            public WCFXmlServiceClientChannel(System.ServiceModel.ClientBase<CapGUI.serverXML.IWCFXmlService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetXmlData(string xmlUrl, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = xmlUrl;
                System.IAsyncResult _result = base.BeginInvoke("GetXmlData", _args, callback, asyncState);
                return _result;
            }
            
            public CapGUI.serverXML.ArrayOfXElement EndGetXmlData(System.IAsyncResult result) {
                object[] _args = new object[0];
                CapGUI.serverXML.ArrayOfXElement _result = ((CapGUI.serverXML.ArrayOfXElement)(base.EndInvoke("GetXmlData", _args, result)));
                return _result;
            }
        }
    }
}
